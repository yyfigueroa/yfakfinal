import re, string
import wikipedia
from bs4 import BeautifulSoup
from match import match
from typing import List, Callable, Tuple, Any, Match

# --- Helper Functions ---

def get_page_html(title: str) -> str:
    results = wikipedia.search(title)
    if not results:
        raise ValueError(f"No Wikipedia page found for '{title}'. Check spelling.")
    return wikipedia.page(results[0], auto_suggest=False).html()

def get_first_infobox_text(html: str) -> str:
    soup = BeautifulSoup(html, "html.parser")
    results = soup.find_all(class_="infobox")
    if not results:
        raise LookupError("Page has no infobox")
    return results[0].text

def clean_text(text: str) -> str:
    only_ascii = "".join([char if char in string.printable else " " for char in text])
    no_dup_spaces = re.sub(" +", " ", only_ascii)
    return no_dup_spaces

def get_match(text: str, pattern: str, error_text: str = "Pattern not found") -> Match:
    p = re.compile(pattern, re.DOTALL | re.IGNORECASE)
    match = p.search(text)
    if not match:
        raise AttributeError(error_text)
    return match

# --- Data Extraction Functions ---

def get_population_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Population.*?([0-9]{1,3}(?:,[0-9]{3})+)"
    match = get_match(infobox_text, pattern, "No population found")
    return match.group(1)

def get_area_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Area.*?([0-9]{1,3}(?:,[0-9]{3})+\s*km2)"
    match = get_match(infobox_text, pattern, "No area found")
    return match.group(1).strip()

def get_language_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Official language[s]?(?:\s*\(.*?\))?\s*[:\-]?\s*([A-Za-z ,]+)"
    match = get_match(infobox_text, pattern, "No official language found")
    return match.group(1).strip()

def get_gdp_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"GDP.*?\$([0-9]{1,3}(?:,[0-9]{3})*(?:\.\d+)?(?:\s*(billion|million|trillion))?)"
    match = get_match(infobox_text, pattern, "No GDP found")
    return "$" + match.group(1)

def get_hdi_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"HDI.*?([0]\.[0-9]{3})"
    match = get_match(infobox_text, pattern, "No HDI found")
    return match.group(1)

def get_capital_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Capital.*?:?\s*([A-Z][a-zA-Z\s,\-().]+)"
    match = get_match(infobox_text, pattern, "No capital found")
    return match.group(1).strip()

def get_currency_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Currency.*?:?\s*([A-Z][a-zA-Z\s\-/,()]+)"
    match = get_match(infobox_text, pattern, "No currency found")
    return match.group(1).strip()

def get_leader_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"(?:President|Prime Minister|Monarch|Leader|Chancellor|Head of Government).*?:\s*([A-Z][a-zA-Z\s.\-'()]+)"
    match = get_match(infobox_text, pattern, "No leader found")
    return match.group(1).strip()

def get_fertility_rate_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Fertility rate.*?([\d.]+)"
    match = get_match(infobox_text, pattern, "No fertility rate found")
    return match.group(1).strip()

def get_independence_date_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Independence.*?([\w\s,0-9]+)"
    match = get_match(infobox_text, pattern, "No independence date found")
    return match.group(1).strip()

def get_life_expectancy_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Life expectancy.*?([\d.]+)"
    match = get_match(infobox_text, pattern, "No life expectancy found")
    return match.group(1).strip()

def get_dialing_code_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"(Calling code|Dialing code|Telephone code).*?(\+\d{1,4})"
    match = get_match(infobox_text, pattern, "No dialing code found")
    return match.group(2).strip()

def get_unemployment_rate_of_country(country: str) -> str:
    html = get_page_html(country)
    infobox_text = clean_text(get_first_infobox_text(html))
    pattern = r"Unemployment rate.*?([\d]{1,2}\.\d{1,2})%?"
    match = get_match(infobox_text, pattern, "No unemployment rate found")
    return match.group(1) + "%"

# --- Action Functions ---

def population(matches: List[str]) -> List[str]: return [get_population_of_country(" ".join(matches))]
def area(matches: List[str]) -> List[str]: return [get_area_of_country(" ".join(matches))]
def language(matches: List[str]) -> List[str]: return [get_language_of_country(" ".join(matches))]
def gdp(matches: List[str]) -> List[str]: return [get_gdp_of_country(" ".join(matches))]
def hdi(matches: List[str]) -> List[str]: return [get_hdi_of_country(" ".join(matches))]
def capital(matches: List[str]) -> List[str]: return [get_capital_of_country(" ".join(matches))]
def currency(matches: List[str]) -> List[str]: return [get_currency_of_country(" ".join(matches))]
def leader(matches: List[str]) -> List[str]: return [get_leader_of_country(" ".join(matches))]
def fertility(matches: List[str]) -> List[str]: return [get_fertility_rate_of_country(" ".join(matches))]
def independence(matches: List[str]) -> List[str]: return [get_independence_date_of_country(" ".join(matches))]
def life(matches: List[str]) -> List[str]: return [get_life_expectancy_of_country(" ".join(matches))]
def dialing(matches: List[str]) -> List[str]: return [get_dialing_code_of_country(" ".join(matches))]
def unemployment(matches: List[str]) -> List[str]: return [get_unemployment_rate_of_country(" ".join(matches))]
def bye_action(dummy: List[str]) -> None: raise KeyboardInterrupt

# --- Pattern/Action List ---

Pattern = List[str]
Action = Callable[[List[str]], List[Any]]

pa_list: List[Tuple[Pattern, Action]] = [
    ("what is the population of %".split(), population),
    ("what is the area of %".split(), area),
    ("what is the official language of %".split(), language),
    ("what are the official languages of %".split(), language),
    ("what is the gdp of %".split(), gdp),
    ("what is the hdi of %".split(), hdi),
    ("what is the capital of %".split(), capital),
    ("what is the currency of %".split(), currency),
    ("who is the leader of %".split(), leader),
    ("what is the fertility rate of %".split(), fertility),
    ("when did % gain independence".split(), independence),
    ("what is the life expectancy of %".split(), life),
    ("what is the dialing code of %".split(), dialing),
    ("what is the unemployment rate of %".split(), unemployment),
    (["bye"], bye_action),
]

# --- Chatbot Loop ---

def search_pa_list(src: List[str]) -> List[str]:
    for pat, act in pa_list:
        mat = match(pat, src)
        if mat is not None:
            answer = act(mat)
            return answer if answer else ["No answers"]
    return ["I don't understand"]

def query_loop() -> None:
    print("Welcome to the Wikipedia chatbot!\n")
    while True:
        try:
            print()
            query = input("Your query? ").replace("?", "").lower().split()
            answers = search_pa_list(query)
            for ans in answers:
                print(ans)
        except (KeyboardInterrupt, EOFError):
            break
    print("\nSo long!\n")

# Run Chatbot
query_loop()